{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crist\\\\e-port 2.0\\\\frontend\\\\src\\\\Logic.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // For Functions\nimport { Button, Alert, Card, Form } from 'react-bootstrap'; // Elements from Bootstrap\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Logic() {\n  _s();\n  const [ipAddress, setIpAddress] = useState(''); // Set initial state to empty string\n  const ipPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/; // Regex pattern for IP address\n  const [scanData, setScanData] = useState(null); // Set initial state to null\n\n  const handleScan = () => {\n    if (!ipPattern.test(ipAddress)) {\n      // If the IP address is not valid, alert the user\n      alert(\"Please enter a valid IP address.\");\n    }\n    fetch(`http://localhost:5000/scan?ip=${ipAddress}`) // Include the IP address in the request\n    .then(response => {\n      if (!response.ok) {\n        // If the response is not OK (e.g. 404), throw an error\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json(); // Format response to JSON\n    }).then(data => setScanData(data)).catch(error => console.log('Error:', error)); // If there is an error, log the error\n  };\n\n  const handleIpChange = event => {\n    // Update the IP address when the input changes\n    setIpAddress(event.target.value);\n  };\n  // List of messages for most important ports\n  const messages = {\n    31337: 'PORT OF THE ELITES. You are most probably hacked right now.',\n    21: 'FTP port is open. This is a security risk that can be exploited by hackers.',\n    20: 'FTP port is open. This is a security risk that can be exploited by hackers',\n    22: 'SSH port is open. This can be a security risk if not properly configured.',\n    139: 'SMB port is open. This can be a security risk (WannaCry).',\n    137: 'SMB port is open. This can be a security risk.',\n    443: 'HTTPS port is open. This can be a security risk.',\n    80: 'HTTP port is open. This can be a security risk.',\n    8080: 'HTTP port is open. This can be a security risk.',\n    8443: 'HTTPS port is open. This can be a security risk.',\n    25: 'SMTP port is open. This can be a security risk.',\n    69: 'TFTP port is open. This can be a security risk.',\n    23: 'Telnet port is open. This can be a security risk.',\n    445: 'SMB port is open. This can be a security risk.',\n    3389: 'RDP port is open. This can be a security risk.',\n    1433: 'SQL-Server port is open. This can be a security risk.',\n    53: 'DNS port is open. You are vulnerable to DDoS attacks.'\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      width: '18rem'\n    },\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Network Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: \"Enter an IP address and click the button below to start the network scan.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"Enter IP address\",\n        value: ipAddress,\n        onChange: handleIpChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"dark\",\n        onClick: handleScan,\n        children: \"Start Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), scanData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [scanData.isSecure ?\n        /*#__PURE__*/\n        // Alert Variants\n        _jsxDEV(Alert, {\n          variant: \"success\",\n          children: \"The network is secure.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: \"The network is not secure.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: [\"Open ports: \", scanData.openPorts.join(', '), \" \", scanData.openPorts.map(port => messages[port] && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: messages[port]\n          }, port, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 143\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(Logic, \"dpMH7/yybugC96HzNn/wcrO9ljU=\");\n_c = Logic;\nexport default Logic;\nvar _c;\n$RefreshReg$(_c, \"Logic\");","map":{"version":3,"names":["React","useState","Button","Alert","Card","Form","jsxDEV","_jsxDEV","Logic","_s","ipAddress","setIpAddress","ipPattern","scanData","setScanData","handleScan","test","alert","fetch","then","response","ok","Error","status","json","data","catch","error","console","log","handleIpChange","event","target","value","messages","style","width","children","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","Text","Control","type","placeholder","onChange","variant","onClick","isSecure","openPorts","join","map","port","_c","$RefreshReg$"],"sources":["C:/Users/crist/e-port 2.0/frontend/src/Logic.js"],"sourcesContent":["import React, { useState } from 'react'; // For Functions\r\nimport { Button, Alert, Card, Form } from 'react-bootstrap'; // Elements from Bootstrap\r\n\r\n\r\nfunction Logic() {\r\n    const [ipAddress, setIpAddress] = useState(''); // Set initial state to empty string\r\n    const ipPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/; // Regex pattern for IP address\r\n    const [scanData, setScanData] = useState(null); // Set initial state to null\r\n\r\n    const handleScan = () => {\r\n        if (!ipPattern.test(ipAddress)) {  // If the IP address is not valid, alert the user\r\n            alert(\"Please enter a valid IP address.\");\r\n        }\r\n        fetch(`http://localhost:5000/scan?ip=${ipAddress}`) // Include the IP address in the request\r\n            .then(response => {\r\n                if (!response.ok) { // If the response is not OK (e.g. 404), throw an error\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json(); // Format response to JSON\r\n            })\r\n            .then(data => setScanData(data))\r\n            .catch(error => console.log('Error:', error)); // If there is an error, log the error\r\n    };\r\n\r\n    const handleIpChange = (event) => { // Update the IP address when the input changes\r\n        setIpAddress(event.target.value);\r\n\r\n    };\r\n    // List of messages for most important ports\r\n    const messages = {\r\n        31337: 'PORT OF THE ELITES. You are most probably hacked right now.',\r\n        21: 'FTP port is open. This is a security risk that can be exploited by hackers.',\r\n        20: 'FTP port is open. This is a security risk that can be exploited by hackers',\r\n        22: 'SSH port is open. This can be a security risk if not properly configured.',\r\n        139: 'SMB port is open. This can be a security risk (WannaCry).',\r\n        137: 'SMB port is open. This can be a security risk.',\r\n        443: 'HTTPS port is open. This can be a security risk.',\r\n        80: 'HTTP port is open. This can be a security risk.',\r\n        8080: 'HTTP port is open. This can be a security risk.',\r\n        8443: 'HTTPS port is open. This can be a security risk.',\r\n        25: 'SMTP port is open. This can be a security risk.',\r\n        69: 'TFTP port is open. This can be a security risk.',\r\n        23: 'Telnet port is open. This can be a security risk.',\r\n        445: 'SMB port is open. This can be a security risk.',\r\n        3389: 'RDP port is open. This can be a security risk.',\r\n        1433: 'SQL-Server port is open. This can be a security risk.',\r\n        53: 'DNS port is open. You are vulnerable to DDoS attacks.'\r\n    };\r\n\r\n    return (\r\n        <Card style={{ width: '18rem' }}>\r\n            <Card.Body>\r\n                <Card.Title>Network Scan</Card.Title>\r\n                <Card.Text>\r\n                    Enter an IP address and click the button below to start the network scan.\r\n                </Card.Text>\r\n                <Form.Control type=\"text\" placeholder=\"Enter IP address\" value={ipAddress} onChange={handleIpChange} />\r\n                <ul></ul>\r\n                <Button variant='dark' onClick={handleScan}>Start Scan</Button>\r\n                <ul></ul>\r\n                {scanData && (\r\n                    <div>\r\n                        {scanData.isSecure ? // Alert Variants\r\n                            <Alert variant=\"success\">The network is secure.</Alert> :\r\n                            <Alert variant=\"danger\">The network is not secure.</Alert>\r\n                        }\r\n                        <Alert variant=\"danger\">Open ports: {scanData.openPorts.join(', ')} {scanData.openPorts.map(port => messages[port] && <p key={port}>{messages[port]}</p>)}</Alert>\r\n\r\n                    </div>\r\n                )}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Logic;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}